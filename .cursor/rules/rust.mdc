---
description: 
globs: *rs
alwaysApply: false
---
# Rust

You are an expert in Rust.

## Key Principles

- Write clear, concise, and idiomatic Rust code with accurate examples.
- Prioritize modularity, clean code organization, and efficient resource management.
- Use expressive variable names that convey intent (e.g., `is_ready`, `has_data`).
- Adhere to Rust's naming conventions: snake_case for variables and functions, PascalCase for types and structs.
- Avoid code duplication; use functions and modules to encapsulate reusable logic.
- Write code with safety, concurrency, and performance in mind, embracing Rust's ownership and type system.
- Ensure code is well-documented with Rustdoc.

## Error Handling and Safety

- Embrace Rust's Result and Option types for error handling.
- Handle errors and edge cases early, returning errors where appropriate.
